variables:
  GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
  DOCKER_IMAGE_NAME: "sebastianburesch/aufgabenplaner"
  DOCKER_IMAGE_TAG: app-1.0
  FRONTEND_TAG: frontend$DOCKER_IMAGE_TAG
  BACKEND_TAG: backend$DOCKER_IMAGE_TAG
  REGISTRY: "$CI_REGISTRY"
  MYSQL_IMAGE: "mysql:8"
  CI_REGISTRY_IMAGE: "registry.gitlab.com/softwareprojekt-gruppe-4/aufgabenplaner"

stages:
  - build
  - test 
  - deploy

before_script:
  - apt-get update && apt-get install -y git
  - git config --global url."git@git.oth-aw.de:".insteadOf "https://git.oth-aw.de/"

# test spring boot backend with spring test
test-backend:
  stage: test
  image: maven:3.9-eclipse-temurin-17  # Or jdk11, jdk21, etc.
  script:
    - cd backend
    - mvn test
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - .m2/repository/
  artifacts:
    when: always


# test angular frontend with karma
#test-frontend:
#  stage: test
#  image: node:18
#  before_script:
#    - apt-get update
#    - apt-get install -y wget gnupg
#    - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
#    - echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list
#    - apt-get update
#    - apt-get install -y google-chrome-stable
#    - cd frontend
#    - npm ci
#  script:
#    - npx ng test --no-watch --no-progress --browsers=ChromeHeadless
#  only: 
#    - main


# Build Backend (Spring Boot)
compile-backend:
  stage: build
  image: maven:3.9.0-eclipse-temurin-17
  before_script:
    - cd backend
  script:
    - mvn clean package -DskipTests
  artifacts:
    paths:
      - backend/target/TaskIT.jar
    when: always
  only:
    - main

dockerize-backend:
  stage: build
  image: docker:28.0.4
  services:
    - docker:28.0.4-dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  needs:
    - job: compile-backend
      artifacts: true
  before_script:
    - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - ls -lah backend/target  # debug step to confirm artifact is there
    - cd backend
    - docker build -t $DOCKER_IMAGE_NAME:$BACKEND_TAG .
    - docker push $DOCKER_IMAGE_NAME:$BACKEND_TAG
  only:
    - main


# Build Frontend (Angular)
build-frontend:
  stage: build
  image: docker:28.0.4
  services:
    - docker:28.0.4-dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk add --no-cache nodejs npm
    - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
    - cd frontend
  script:
    - npm ci
    - npm run build --prod --no-progress --optimization --aot
    - docker build -t $DOCKER_IMAGE_NAME:$FRONTEND_TAG -f Dockerfile .
    - docker push $DOCKER_IMAGE_NAME:$FRONTEND_TAG
  only:
    - main

e2e_tests:
  stage: test
  image: docker:28.0.4
  services:
    - docker:28.0.4-dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk add --no-cache git curl  # Since docker:28.0.4 is Alpine-based, use apk instead of apt-get
    - git config --global url."git@git.oth-aw.de:".insteadOf "https://git.oth-aw.de/"
    - curl -L https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
  script:
    - docker-compose version
    - docker compose -f docker-compose.test.yml up --abort-on-container-exit --exit-code-from e2e


# Deploy the Application
#deploy:
#  stage: deploy
#  image: docker:28.0.4
#  services:
#    - docker:28.0.4-dind
#  variables:
#    DOCKER_HOST: "tcp://docker:2375"
#    DOCKER_TLS_CERTDIR: ""
#  before_script:
#    - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
#  script:
#    - docker pull $DOCKER_IMAGE_NAME:$FRONTEND_TAG
#    - docker pull $DOCKER_IMAGE_NAME:$BACKEND_TAG
#    - docker run -d --name frontend -p 80:80 $DOCKER_IMAGE_NAME:$FRONTEND_TAG
#    - docker run -d --name backend -p 8080:8080 $DOCKER_IMAGE_NAME:$BACKEND_TAG
#  only:
#    - main



deploy_to_ec2:
  stage: deploy
  image: ubuntu:latest
  before_script:
    - apt-get update && apt-get install -y openssh-client
    - mkdir -p ~/.ssh
    - chmod 600 "$EC2_SSH_KEY"
    - ssh-keyscan -H ec2-51-20-54-53.eu-north-1.compute.amazonaws.com >> ~/.ssh/known_hosts

  script:
    # copy docker compose onto EC2
    - scp -i "$EC2_SSH_KEY" docker-compose.yml ubuntu@ec2-51-20-54-53.eu-north-1.compute.amazonaws.com:/home/ubuntu/

    # log onto EC2, log into docker, execute docker-compose
    - ssh -i "$EC2_SSH_KEY" ubuntu@ec2-51-20-54-53.eu-north-1.compute.amazonaws.com "
      docker login -u '$DOCKER_USER' -p '$DOCKER_PASS' &&
      docker compose -f /home/ubuntu/docker-compose.yml up -d --pull always
      "

  only:
    - main




